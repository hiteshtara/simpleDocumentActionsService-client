package edu.bu.kuali.rice.kew.client;




import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.xml.namespace.QName;

import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.wss4j.dom.WSConstants;
import org.apache.wss4j.dom.handler.WSHandlerConstants;
import org.kuali.rice.kim.v2_0.GetEntityByEmployeeId;
import org.kuali.rice.kim.v2_0.GetEntityByEmployeeIdResponse;
import org.kuali.rice.kim.v2_0.IdentityService;
import org.kuali.rice.kim.v2_0.IdentityService_Service;



/**
 * This class was generated by Apache CXF 2.1.2
 * Sat Jan 26 22:59:19 EST 2013
 * Generated source version: 2.1.2
 *
 */

public final class IdentityService_ServiceClien2 {


    private static final QName SERVICE_NAME = new QName("http://rice.kuali.org/kim/v2_0", "identityService");

private IdentityService_ServiceClien2() {
}

public static void main(String args[]) throws Exception {
    URL wsdlURL = IdentityService.WSDL_LOCATION;
    if (args.length > 0) {
        File wsdlFile = new File(args[0]);
        try {
            if (wsdlFile.exists()) {
                wsdlURL = wsdlFile.toURI().toURL();
            } else {
                wsdlURL = new URL(args[0]);
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
    }

    IdentityService_Service ss = new IdentityService_Service();
    IdentityService port = ss.getIdentityServicePort();


    org.apache.cxf.endpoint.Client client = ClientProxy.getClient(port);
    org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();

    prepareOutInterceptors(cxfEndpoint);
    prepareInInterceptors(cxfEndpoint);
	 GetEntityByEmployeeId id= new GetEntityByEmployeeId();
	      id.setEmployeeId("U17116978");
	      GetEntityByEmployeeIdResponse test=   port.getEntityByEmployeeId(id);
	      System.out.println( test.toString() );


    System.exit(0);
}

private static void prepareOutInterceptors(org.apache.cxf.endpoint.Endpoint cxfEndpoint) {
	Map<String,Object> outProps = new HashMap<String,Object>();


	setDigitalSignatureAuth(outProps);
	//setUsernameTokenAuth(outProps);


    WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(outProps);
    cxfEndpoint.getOutInterceptors().add(wssOut);
    cxfEndpoint.getOutInterceptors().add(new LoggingOutInterceptor());
}

/**
 * next steps
 * - import the hiteshkey.rsa public key into a running instance of rice server
 * - point this application at the running instance of rice that should now trust the hitesh key
 *
 * - if necessary, import the rice public key into client keystore and modify the inProps to trust / decrypt
 * 		rice's responses using the rice public key
 *
 */
private static void setDigitalSignatureAuth(Map<String, Object> outProps) {
	outProps.put(WSHandlerConstants.ACTION, "Signature");

//	outProps.put(WSHandlerConstants.USER, "burice");	// required by SOAP for signing. Must match alias in the .keystore
	outProps.put(WSHandlerConstants.USER, "rice");	// required by SOAP for signing. Must match alias in the .keystore

	outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, KSBClientCallbackHandler.class.getName());	// must return password for the key (-keypass)
	outProps.put(WSHandlerConstants.SIG_PROP_FILE, "client-sign.properties");
}

private static void setUsernameTokenAuth(Map<String, Object> outProps) {
	outProps.put(WSHandlerConstants.ACTION, WSHandlerConstants.USERNAME_TOKEN);
    outProps.put(WSHandlerConstants.USER, "joe");
    outProps.put(WSHandlerConstants.PASSWORD_TYPE, WSConstants.PW_TEXT);
    outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, KSBClientCallbackHandler.class.getName());
}

private static void prepareInInterceptors(org.apache.cxf.endpoint.Endpoint cxfEndpoint) {
//	Map<String,Object> inProps= new HashMap<String,Object>();
//    WSS4JInInterceptor wssIn = new WSS4JInInterceptor(inProps);
//    cxfEndpoint.getInInterceptors().add(wssIn);
    cxfEndpoint.getInInterceptors().add(new LoggingInInterceptor());
}
}
